FROM timescale/timescaledb:2.17.2-pg17 as timescale-pg17

FROM timescale-pg17 AS timescaledb-toolkit
ARG VERSION=1.19.0
ARG TARGETARCH
RUN --mount=type=cache,id=apk-${TARGETARCH}-${TARGETVARIANT},sharing=locked,target=/var/cache/apk \
    --mount=type=cache,id=cargo-${TARGETARCH}-${TARGETVARIANT},sharing=locked,target=/root/.cargo \
    set -ex \
    && apk update \
    && if [ "$TARGETARCH" == "amd64" ] || [ "$TARGETARCH" == "arm64" ]; then \
            apk add \
                        ca-certificates \
                        git \
                        openssl \
                        openssl-dev \
                        tar \
                        wget \
                        curl \
            && apk add \
                        coreutils \
                        gcc \
                        make \
                        cmake \
                        build-base \
            && apk add --repository http://dl-cdn.alpinelinux.org/alpine/v3.20/main/ \
                        rust \
                        cargo \
            && export PATH="/root/.cargo/bin:${PATH}" \
            && cargo install --version '=0.10.2' --force cargo-pgrx \
            && cargo install rustfmt; \
       fi

# Add compatibility libraries for timescaledb toolkit
RUN --mount=type=cache,id=apk-${TARGETARCH}-${TARGETVARIANT},sharing=locked,target=/var/cache/apk \
    set -ex \
    && apk update \
    && if [ "$TARGETARCH" == "amd64" ] || [ "$TARGETARCH" == "arm64" ]; then \
        apk add gcompat clang16-libclang clang15-libclang; \
    fi

RUN --mount=type=cache,id=pgrx-${TARGETARCH}-${TARGETVARIANT},sharing=locked,target=/root/.pgrx \
    --mount=type=cache,id=cargo-${TARGETARCH}-${TARGETVARIANT},sharing=locked,target=/root/.cargo \
    set -ex \
    && if [ "$TARGETARCH" == "amd64" ] || [ "$TARGETARCH" == "arm64" ]; then \
        export PATH="/root/.cargo/bin:${PATH}" \
        && mkdir -p /build/ \
        && cd /build \
            && git clone https://github.com/timescale/timescaledb-toolkit.git . \
            && git checkout ${VERSION} \
            && cd extension \
            # initdb fails as root so generate the correct config ourselves
            # && cargo pgx init --pg17 /usr/lib/postgresql/14/bin/pg_config
            && mkdir -p /root/.pgrx \
            && printf '[configs]\npg17="/usr/local/bin/pg_config"\n' > /root/.pgrx/config.toml \
            && cargo pgrx install --release \
            && cargo run --manifest-path ../tools/post-install/Cargo.toml -- /usr/local/bin/pg_config \
        && cd ~ \
        && rm -rf /build \
        && echo "OK" /toolkit; \
    fi
